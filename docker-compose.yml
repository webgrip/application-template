services:
  application-application.application:
    container_name: application-application
    image: organisation/application-application:latest
    pull_policy: never
    build:
      context: .
      dockerfile: ops/docker/application/Dockerfile
    restart: always
    depends_on:
      application-application.postgres:
        condition: service_healthy
      application-application.redis:
        condition: service_healthy
    ports:
      - "127.0.0.1:8080:8080"
    labels:
      - "traefik.enable=true"

      # -------------------------------
      # 1) Router for HTTP (port 80)
      # -------------------------------
      - "traefik.http.routers.application-application.entrypoints=web"
      - "traefik.http.routers.application-application.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)"
      # This middleware redirects to HTTPS
      - "traefik.http.routers.application-application.middlewares=redirect-to-https"

      # Define the middleware that redirects HTTP -> HTTPS
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # --------------------------------
      # 2) Router for HTTPS (port 443)
      # --------------------------------
      - "traefik.http.routers.application-application-secure.entrypoints=websecure"
      - "traefik.http.routers.application-application-secure.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.application-application-secure.tls=true"

      # Configure certs (the main domain + wildcard SAN)
      - "traefik.http.routers.application-application-secure.tls.domains[0].main=${SUBDOMAIN}.${DOMAIN_NAME}"
      - "traefik.http.routers.application-application-secure.tls.domains[0].sans=*.${DOMAIN_NAME}"

      # Attach this router to the 'application-application' service
      - "traefik.http.routers.application-application-secure.service=application-application@docker"

      # --------------------------------
      # 3) Service definition for application-application
      # --------------------------------
      - "traefik.http.services.application-application.loadbalancer.server.scheme=http"
      - "traefik.http.services.application-application.loadbalancer.server.port=8080"

    env_file:
      - .env
    environment:
      - SUBDOMAIN=${SUBDOMAIN:-application-application}
      - DOMAIN_NAME=${DOMAIN_NAME:-organisation.test}
      - APP_ENV=${APP_ENV:-local}
      - APP_DEBUG=${APP_DEBUG:-true}
      - DB_HOST=application-application.postgres
      - DB_PORT=5432
      - DB_DATABASE=${DB_BASE}
      - DB_USERNAME=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=application-application.redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - TZ=${TZ:-UTC}
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 20s
    volumes:
      - application-application-application-data:/data

  application-application.mkcert:
    container_name: application-application-mkcert
    image: organisation/traefik-local-development-mkcert:latest
    pull_policy: always
    volumes:
      - ~/.config/mkcert:/root/.local/share/mkcert:ro
      - certificate-data:/certificate-data:rw
    entrypoint:
      ["/app/entrypoint.sh", "${DOMAIN_NAME}", "${SUBDOMAIN}.${DOMAIN_NAME}"]

  application-application.postgres:
    container_name: application-application-postgres
    image: organisation/application-application-postgres:latest
    pull_policy: never
    build:
      context: .
      dockerfile: ops/docker/postgres/Dockerfile
    restart: unless-stopped
    ports:
      - "127.0.0.1:5432:5432"
    logging:
      options:
        max-size: 10m
    environment:
      POSTGRES_DB: ${DB_BASE}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - application-application-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_BASE}"]
      interval: 5s
      timeout: 3s
      retries: 20

  application-application.mariadb:
    container_name: application-application-mariadb
    image: organisation/application-application-mariadb:latest
    build:
      context: .
      dockerfile: ops/docker/mariadb/Dockerfile
    pull_policy: never
    restart: unless-stopped
    ports:
      - "127.0.0.1:3306:3306"
    logging:
      options:
        max-size: 10m
    env_file:
      - ./.env
    environment:
      MARIADB_DATABASE: ${DB_BASE:-ninja}
      MARIADB_USER: ${DB_USER:-ninja}
      MARIADB_PASSWORD: ${DB_PASSWORD:-ninja}
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root}
      MARIADB_CHARACTER_SET_SERVER: utf8mb4
      MARIADB_COLLATION_SERVER: utf8mb4_unicode_ci
    volumes:
      - application-application-mariadb-data:/var/lib/mysql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'mariadb --socket=/var/run/mysqld/mysqld.sock --user="${DB_USER:-}" --password="${DB_PASSWORD:-}" --protocol=TCP --execute="SELECT 1" >/dev/null 2>&1 || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  application-application.redis:
    container_name: application-application-redis
    image: organisation/application-application-redis:latest
    pull_policy: never
    build:
      context: .
      dockerfile: ops/docker/redis/Dockerfile
    restart: always
    volumes:
      - application-application-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s

volumes:
  application-application-application-data:
  application-application-postgres-data:
  application-application-redis-data:
  certificate-data:
    external: true

networks:
  default:
    external: true
    name: organisation
